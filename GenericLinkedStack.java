/*Generic Linked Stack implementation*/import java.util.EmptyStackException;public class GenericLinkedStack<E> {   private Node<E> top;   private int size;      public GenericLinkedStack() {       top = null;       size = 0;   }   public void push(E item) {      top = new Node(item, top);      size++;   }      public E pop() {       if (isEmpty())           throw new EmptyStackException();       else {            E result = top.data;            top = top.next;            size--;            return result;       }   }      public E peek() {       if (isEmpty())            throw new EmptyStackException();       else {            E result = top.data;            return result;       }   }      public boolean isEmpty() {       if (top == null)           return true;       else           return false;   }      public int size() {       return size;   }      private static class Node<T> {      private T data;      private Node<T> next;      private Node(T data, Node<T> next) {         this.data = data;         this.next = next;      }   }}